generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Category{
  id    String @id @default(uuid()) @map("_id") @db.ObjectId
  title String 
  desc String 
  color String
  img String 
  slug String @unique
  products Product[]
  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt
}

model Product {
  id    String @id @default(uuid()) @map("_id")
  title String
  desc String 
  img String 
  price Float
  isFeatured Boolean
  options Json[]
  category Category @relation(fields: [catSlug], references: [slug])
  catSlug String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
model Order{
  id String @id @default(uuid()) @map("_id") 
  price Float
  products Json[]
  status String
  intent_id String? @unique
  user User @relation(fields: [userEmail], references: [email])
  userEmail String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
    id                String  @id @default(cuid()) @map("_id")
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? 
  access_token      String? 
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? 
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid()) @map("_id")
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid()) @map("_id")
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  isAdmin       Boolean @default(false)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  accounts      Account[]
  sessions      Session[]
  orders        Order[]
  
}

model VerificationRequest {
  id         String   @id @default(cuid()) @map("_id")
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([identifier, token])
}